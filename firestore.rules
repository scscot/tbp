rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow reads based on authenticated relationships and optional participant access
      allow read: if request.auth != null && (
        // 1. Read your own profile
        request.auth.uid == userId ||

        // 2. They're in your downline (they list you in upline_refs)
        (resource.data.upline_refs != null && request.auth.uid in resource.data.upline_refs) ||

        // 3. They're in your upline (you list them in upline_refs)
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.upline_refs) ||

        // 4. They are your direct upline admin
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.upline_admin == userId) ||

        // 5. They have explicitly allowed you to view their profile (from a chat)
        (resource.data.can_read_profile != null && request.auth.uid in resource.data.can_read_profile)
      );

      // --- MODIFICATION: Replaced 'allow write' with explicit permissions ---
      // A user can update their own document (e.g., to add an fcm_token).
      allow update: if request.auth != null && request.auth.uid == userId;

      // Client-side creation and deletion of user documents is disallowed.
      // This is handled securely by backend Cloud Functions.
      allow create, delete: if false;
      // --- End of Modification ---

      // A user can only access their own notifications.
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Rules for the /chats collection (Unchanged) ---
    match /chats/{chatId} {
      allow read: if (request.auth.uid in chatId.split('_')) ||
                      (request.auth.uid in resource.data.participants);

      allow write: if request.auth.uid in chatId.split('_') &&
                       request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read: if request.auth != null && 
                    request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // More permissive create rule to allow message creation
        allow create: if request.auth != null && 
                      request.resource.data.senderId == request.auth.uid &&
                      (request.auth.uid in chatId.split('_') || 
                       (exists(/databases/$(database)/documents/chats/$(chatId)) &&
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants));
        
        allow update, delete: if false;
      }
    }

    // --- Rules for Admin Settings (Unchanged) ---
    match /admin_settings/{adminId} {
      // MODIFICATION: Allow any authenticated user to READ the settings.
      // This is necessary so that users can see their upline admin's
      // business opportunity name and base URL.
      allow read: if request.auth != null;

      // MODIFICATION: Keep the WRITE rule strict.
      // Only the admin who owns these settings can modify them.
      allow write: if request.auth != null && request.auth.uid == adminId &&
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}