rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // REFERRAL ACCESS: Allow unauthenticated read access for referral processing
      // This maintains your existing functionality while improving security
      allow get: if (
        // Authenticated users get full access based on existing rules
        request.auth != null && (
          // 1. Get your own profile
          request.auth.uid == userId ||

          // 2. They're in your downline (they list you in upline_refs)
          (resource.data.upline_refs != null && request.auth.uid in resource.data.upline_refs) ||

          // 3. They're in your upline (you list them in upline_refs)
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.upline_refs) ||

          // 4. They are your direct upline admin
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.upline_admin == userId) ||

          // 5. They have explicitly allowed you to view their profile (from a chat)
          (resource.data.can_read_profile != null && request.auth.uid in resource.data.can_read_profile)
        )
      ) || (
        // Unauthenticated users can access user data for referral lookups
        // This allows your website referral functionality to work
        request.auth == null
      );
      
      // REFERRAL LIST ACCESS: Enhanced controls for list queries
      allow list: if (
        // Authenticated users can list with proper constraints
        request.auth != null && (
          request.query.limit <= 50 && // Prevent large data dumps
          // Allow authenticated users to query for referral uniqueness and network functionality
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
        )
      ) || (
        // Unauthenticated users: Allow limited queries for referral functionality only
        request.auth == null &&
        request.query.limit <= 5 && // Strict limit for unauthenticated queries
        // Must be a specific referral code query (not general browsing)
        request.query.where.size() >= 1
      );

      // A user can update their own document.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Client-side creation and deletion is disallowed.
      allow create, delete: if false;

      // A user can only access their own notifications.
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Rules for the /chats collection (Unchanged) ---
    match /chats/{chatId} {
      allow read: if request.auth != null && (
        (request.auth.uid in chatId.split('_')) ||
        (request.auth.uid in resource.data.participants)
      );

      allow write: if request.auth != null && 
                   request.auth.uid in chatId.split('_') &&
                   request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read: if request.auth != null && 
                    request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
        // More permissive create rule to allow message creation
        allow create: if request.auth != null && 
                      request.resource.data.senderId == request.auth.uid &&
                      (request.auth.uid in chatId.split('_') || 
                       (exists(/databases/$(database)/documents/chats/$(chatId)) &&
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants));
      
        allow update, delete: if false;
      }
    }

    // --- Rules for Admin Settings ---
    match /admin_settings/{adminId} {
      // SECURE ADMIN ACCESS: Enhanced field-level restrictions for unauthenticated users
      allow read: if (
        // Authenticated users get full access if they're the admin or in their network
        request.auth != null && (
          request.auth.uid == adminId ||
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.upline_admin == adminId)
        )
      ) || (
        // Unauthenticated users can only access specific non-sensitive fields
        request.auth == null &&
        resource.data.keys().hasAny(['biz_opp', 'countries']) &&
        // Explicitly exclude sensitive fields for unauthenticated access
        !resource.data.keys().hasAny(['superAdmin', 'apiKeys', 'settings', 'privateData'])
      );

      // WRITE rule remains strict - only the admin can modify their settings
      allow write: if request.auth != null && request.auth.uid == adminId &&
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Rules for Launch Notifications ---
    match /launch_notifications/{notificationId} {
      // Allow unauthenticated operations for website email signup and duplicate checking
      allow create, read, update: if request.auth == null;
      
      // Admin access for all operations
      allow read, update, delete: if request.auth != null && 
                                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Rules for AI Chatbot Collections ---
    // FAQ collection - read-only for all authenticated users
    match /faq/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can modify
    }

    // Chat usage tracking - users can only read their own usage data
    match /chat_usage/{document} {
      allow read, write: if request.auth != null && 
        document.matches(request.auth.uid + '_.*');
    }

    // Chat logs - no direct client access (Cloud Functions only)
    match /chat_logs/{document} {
      allow read, write: if false; // Only Cloud Functions can access
    }

    // --- Rules for Referral Attribution System (App Clip) ---
    // Referral tokens - no client access (Cloud Functions only)
    match /referralTokens/{token} {
      allow read, write: if false; // Only Cloud Functions can issue/redeem
    }

    // App Clip handoffs - no client access (Cloud Functions only)
    match /clipHandoffs/{handoffId} {
      allow read, write: if false; // Only Cloud Functions can create/claim
    }

    // Referral codes mapping - read-only for authenticated lookups
    match /referralCodes/{code} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can manage mappings
    }

    // --- Rules for Settings Collection ---
    // Early Adopter settings - public read access for website countdown
    match /settings/earlyAdopter {
      allow read: if true; // Public read for countdown display
      allow write: if false; // Only Cloud Functions can modify
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
